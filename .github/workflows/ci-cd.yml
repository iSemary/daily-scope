name: Laravel CI/CD Pipeline

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

jobs:
  test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        php-version: [8.4]

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root_password
          MYSQL_DATABASE: daily_scope_test
          MYSQL_USER: daily_scope_user
          MYSQL_PASSWORD: daily_scope_password
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: --health-cmd="redis-cli ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP ${{ matrix.php-version }}
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-version }}
          extensions: mbstring, dom, fileinfo, mysql, zip, bcmath, intl, gd, redis
          coverage: xdebug

      - name: Get composer cache directory
        id: composer-cache
        run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

      - name: Cache composer dependencies
        uses: actions/cache@v3
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-

      - name: Install PHP dependencies
        run: composer install --prefer-dist --no-progress --no-suggest

      - name: Copy .env
        run: php -r "file_exists('.env') || copy('.env.example', '.env');"

      - name: Generate key
        run: php artisan key:generate

      - name: Directory Permissions
        run: chmod -R 777 storage bootstrap/cache

      - name: Create Database
        run: |
          mysql --host 127.0.0.1 --port 3306 -u root -proot_password -e "CREATE DATABASE IF NOT EXISTS daily_scope_test;"

      - name: Run Database Migrations
        run: php artisan migrate --force
        env:
          DB_CONNECTION: mysql
          DB_HOST: 127.0.0.1
          DB_PORT: 3306
          DB_DATABASE: daily_scope_test
          DB_USERNAME: daily_scope_user
          DB_PASSWORD: daily_scope_password
          REDIS_HOST: 127.0.0.1
          REDIS_PORT: 6379

      - name: Run PHPUnit Tests
        run: php artisan test --coverage --coverage-clover=coverage.xml
        env:
          DB_CONNECTION: mysql
          DB_HOST: 127.0.0.1
          DB_PORT: 3306
          DB_DATABASE: daily_scope_test
          DB_USERNAME: daily_scope_user
          DB_PASSWORD: daily_scope_password
          REDIS_HOST: 127.0.0.1
          REDIS_PORT: 6379

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      - name: Run PHP CS Fixer
        run: |
          composer require --dev friendsofphp/php-cs-fixer
          ./vendor/bin/php-cs-fixer fix --config=.php-cs-fixer.php --dry-run --diff --verbose --stop-on-violation=false || echo "Code formatting issues found but not blocking deployment"

  deploy-to-vps:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to VPS
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ secrets.VPS_PORT }}
          script: |
            # Navigate to project directory
            cd ${{ secrets.PROJECT_DIRECTORY }}
            
            # Pull latest changes
            echo "üîÑ Pulling latest changes..."
            git pull origin master
            
            # Install/Update Composer dependencies
            echo "üì¶ Installing Composer dependencies..."
            composer install --no-dev --optimize-autoloader --no-interaction
            
            # Set proper permissions
            echo "üîê Setting proper permissions..."
            chmod -R 755 storage bootstrap/cache
            chown -R www-data:www-data storage bootstrap/cache
            
            # Copy environment file if it doesn't exist
            echo "‚öôÔ∏è Setting up environment..."
            if [ ! -f .env ]; then
              cp .env.example .env
              echo "üìù Created .env file from .env.example"
            fi
            
            # Generate application key if not set
            echo "üîë Generating application key..."
            php artisan key:generate --force
            
            # Clear and cache configuration
            echo "üßπ Clearing application cache..."
            php artisan config:clear
            php artisan cache:clear
            php artisan route:clear
            php artisan view:clear
            
            # Cache configuration for production
            echo "‚ö° Caching configuration for production..."
            php artisan config:cache
            php artisan route:cache
            php artisan view:cache
            
            # Run database migrations
            echo "üîÑ Running database migrations..."
            php artisan migrate --force
            
            # Run module migrations
            echo "üîÑ Running module migrations..."
            php artisan module:migrate --force
            
            # Run any pending database seeders (optional)
            echo "üå± Running database seeders..."
            php artisan db:seed --force || echo "No seeders to run or seeders failed"
            
            # Restart PHP-FPM and web server
            echo "üîÑ Restarting services..."
            sudo systemctl reload php8.4-fpm || echo "PHP-FPM reload failed"
            sudo systemctl reload nginx || sudo systemctl reload apache2 || echo "Web server reload failed"
            
            # Check if the application is responding
            echo "üîç Checking application health..."
            if curl -f http://localhost || curl -f http://localhost:8000; then
              echo "‚úÖ Deployment successful!"
              echo "üåê Application is running and responding"
            else
              echo "‚ö†Ô∏è Application might not be responding, but deployment completed"
            fi
            
            # Show application status
            echo "üìä Application status:"
            php artisan about
            
            echo "üéâ Deployment completed successfully!"
